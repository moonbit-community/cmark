package rami3l/cmark/cmark

// Values
let layout_empty : Node[String]

fn layout_of_string(meta~ : @rami3l/cmark/cmark_base.Meta = .., String) -> Node[String]

// Types and methods
type Atx
impl Atx {
  to_json(Self) -> Json
}
impl Show for Atx
impl ToJson for Atx

type BState
impl BState {
  op_equal(Self, Self) -> Bool
}
impl Eq for BState

pub(all) enum Block {
  BlankLine(Node[String])
  BlockQuote(Node[BlockQuote])
  Blocks(Node[@moonbitlang/core/immut/list.T[Block]])
  CodeBlock(Node[CodeBlock])
  Heading(Node[BlockHeading])
  HtmlBlock(Node[HtmlBlock])
  LinkRefDefinition(Node[LinkDefinition])
  List(Node[BlockList])
  Paragraph(Node[BlockParagraph])
  ThematicBreak(Node[BlockThematicBreak])
  ExtTable(Node[Table])
  ExtFootnoteDefinition(Node[Footnote])
}
impl Block {
  defs(Self, init~ : @moonbitlang/core/immut/sorted_map.T[String, LabelDef] = ..) -> @moonbitlang/core/immut/sorted_map.T[String, LabelDef]
  empty() -> Self
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  meta(Self) -> @rami3l/cmark/cmark_base.Meta
  normalize(Self) -> Self
  to_json(Self) -> Json
}
impl Show for Block
impl ToJson for Block
impl @moonbitlang/core/json.FromJson for Block

pub(all) struct BlockHeading {
  layout : BlockHeadingLayout
  level : Int
  inline : Inline
  id : BlockHeadingId?
}
impl BlockHeading {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  new(id~ : BlockHeadingId? = .., layout~ : BlockHeadingLayout = .., level~ : Int, Inline) -> Self
  to_json(Self) -> Json
}
impl Show for BlockHeading
impl ToJson for BlockHeading
impl @moonbitlang/core/json.FromJson for BlockHeading

pub(all) struct BlockHeadingAtxLayout {
  indent : Int
  after_opening : String
  closing : String
}
impl BlockHeadingAtxLayout {
  default() -> Self
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  to_json(Self) -> Json
}
impl Show for BlockHeadingAtxLayout
impl ToJson for BlockHeadingAtxLayout
impl @moonbitlang/core/json.FromJson for BlockHeadingAtxLayout

pub(all) enum BlockHeadingId {
  Auto(String)
  Id(String)
}
impl BlockHeadingId {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  to_json(Self) -> Json
}
impl Show for BlockHeadingId
impl ToJson for BlockHeadingId
impl @moonbitlang/core/json.FromJson for BlockHeadingId

pub(all) enum BlockHeadingLayout {
  Atx(BlockHeadingAtxLayout)
  Setext(BlockHeadingSetextLayout)
}
impl BlockHeadingLayout {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  to_json(Self) -> Json
}
impl Show for BlockHeadingLayout
impl ToJson for BlockHeadingLayout
impl @moonbitlang/core/json.FromJson for BlockHeadingLayout

pub(all) struct BlockHeadingSetextLayout {
  leading_indent : Int
  trailing_blanks : String
  underline_indent : Int
  underline_count : Node[Int]
  underline_blanks : String
}
impl BlockHeadingSetextLayout {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  to_json(Self) -> Json
}
impl Show for BlockHeadingSetextLayout
impl ToJson for BlockHeadingSetextLayout
impl @moonbitlang/core/json.FromJson for BlockHeadingSetextLayout

pub(all) type BlockLine Node[String]
impl BlockLine {
  list_text_loc(@moonbitlang/core/immut/list.T[Self]) -> @rami3l/cmark/cmark_base.TextLoc
  to_string(Self) -> String
}

pub(all) struct BlockList {
  ty : @rami3l/cmark/cmark_base.ListType
  tight : Bool
  items : @moonbitlang/core/immut/list.T[Node[ListItem]]
}
impl BlockList {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  map_items(Self, (ListItem) -> ListItem) -> Self
  normalize_items(Self) -> Self
  to_json(Self) -> Json
}
impl Show for BlockList
impl ToJson for BlockList
impl @moonbitlang/core/json.FromJson for BlockList

pub(all) struct BlockParagraph {
  leading_indent : Int
  inline : Inline
  trailing_blanks : String
}
impl BlockParagraph {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  new(leading_indent~ : Int = .., trailing_blanks~ : String = .., Inline) -> Self
  to_json(Self) -> Json
}
impl Show for BlockParagraph
impl ToJson for BlockParagraph
impl @moonbitlang/core/json.FromJson for BlockParagraph

pub(all) struct BlockQuote {
  indent : Int
  block : Block
}
impl BlockQuote {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  map_block(Self, (Block) -> Block) -> Self
  new(indent~ : Int = .., Block) -> Self
  normalize_block(Self) -> Self
  to_json(Self) -> Json
}
impl Show for BlockQuote
impl ToJson for BlockQuote
impl @moonbitlang/core/json.FromJson for BlockQuote

type BlockStruct
impl BlockStruct {
  to_json(Self) -> Json
}
impl Show for BlockStruct
impl ToJson for BlockStruct

pub(all) struct BlockThematicBreak {
  indent : Int
  layout : String
}
impl BlockThematicBreak {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  new(indent~ : Int = .., layout~ : String = ..) -> Self
  to_json(Self) -> Json
}
impl Show for BlockThematicBreak
impl ToJson for BlockThematicBreak
impl @moonbitlang/core/json.FromJson for BlockThematicBreak

type Closer
impl Closer {
  compare(Self, Self) -> Int
  hash_combine(Self, Hasher) -> Unit
  op_equal(Self, Self) -> Bool
  to_json(Self) -> Json
}
impl Compare for Closer
impl Eq for Closer
impl Hash for Closer
impl Show for Closer
impl ToJson for Closer

type CloserIndex
impl CloserIndex {
  to_json(Self) -> Json
}
impl Show for CloserIndex
impl ToJson for CloserIndex

pub(all) struct CodeBlock {
  layout : CodeBlockLayout
  info_string : Node[String]?
  code : @moonbitlang/core/immut/list.T[Node[String]]
}
impl CodeBlock {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  language_of_info_string(String) -> (String, String)?
  make_fence(Self) -> (Char, Int)
  new(layout~ : CodeBlockLayout = .., info_string~ : Node[String]? = .., @moonbitlang/core/immut/list.T[Node[String]]) -> Self
  to_json(Self) -> Json
}
impl Show for CodeBlock
impl ToJson for CodeBlock
impl @moonbitlang/core/json.FromJson for CodeBlock

pub(all) struct CodeBlockFencedLayout {
  indent : Int
  opening_fence : Node[String]
  closing_fence : Node[String]?
}
impl CodeBlockFencedLayout {
  default() -> Self
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  to_json(Self) -> Json
}
impl Show for CodeBlockFencedLayout
impl ToJson for CodeBlockFencedLayout
impl @moonbitlang/core/json.FromJson for CodeBlockFencedLayout

pub(all) enum CodeBlockLayout {
  Indented
  Fenced(CodeBlockFencedLayout)
}
impl CodeBlockLayout {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  to_json(Self) -> Json
}
impl Show for CodeBlockLayout
impl ToJson for CodeBlockLayout
impl @moonbitlang/core/json.FromJson for CodeBlockLayout

type CodeBlockStruct
impl CodeBlockStruct {
  to_json(Self) -> Json
}
impl Show for CodeBlockStruct
impl ToJson for CodeBlockStruct

pub(all) struct Doc {
  nl : String
  block : Block
  defs : @moonbitlang/core/immut/sorted_map.T[String, LabelDef]
}
impl Doc {
  empty() -> Self
  from_string(defs~ : @moonbitlang/core/immut/sorted_map.T[String, LabelDef] = .., resolver~ : (LabelContext) -> Label? = .., nested_links~ : Bool = .., heading_auto_ids~ : Bool = .., layout~ : Bool = .., locs~ : Bool = .., file~ : String = .., strict~ : Bool = .., String) -> Self
  new(nl~ : String = .., defs~ : @moonbitlang/core/immut/sorted_map.T[String, LabelDef] = .., Block) -> Self
  to_json(Self) -> Json
}
impl Show for Doc
impl ToJson for Doc

type Fence
impl Fence {
  to_json(Self) -> Json
}
impl Show for Fence
impl ToJson for Fence

type FenceCodeBlockStruct
impl FenceCodeBlockStruct {
  to_json(Self) -> Json
}
impl Show for FenceCodeBlockStruct
impl ToJson for FenceCodeBlockStruct

pub(all) struct Folder {
  inline_ext_default : (Folder[A], A, Inline) -> A!FolderError
  block_ext_default : (Folder[A], A, Block) -> A!FolderError
  inline : (Folder[A], A, Inline) -> FolderResult[A]
  block : (Folder[A], A, Block) -> FolderResult[A]
}
impl Folder {
  block_ext_none[A](Self[A], A, Block) -> A!FolderError
  fold_block[A](Self[A], A, Block) -> A!FolderError
  fold_doc[A](Self[A], A, Doc) -> A!FolderError
  fold_inline[A](Self[A], A, Inline) -> A!FolderError
  inline_ext_none[A](Self[A], A, Inline) -> A!FolderError
  new[A](inline_ext_default~ : (Self[A], A, Inline) -> A!FolderError = .., block_ext_default~ : (Self[A], A, Block) -> A!FolderError = .., inline~ : (Self[A], A, Inline) -> FolderResult[A] = .., block~ : (Self[A], A, Block) -> FolderResult[A] = ..) -> Self[A]
  none[A, B](Self[A], A, B) -> FolderResult[A]
  ret[A](A) -> FolderResult[A]
}

pub(all) type! FolderError String
impl Show for FolderError

pub(all) enum FolderResult {
  Default
  Fold(A)
}
impl FolderResult {
  op_equal[A : Eq](Self[A], Self[A]) -> Bool
  to_json[A : ToJson](Self[A]) -> Json
}
impl[A] Default for FolderResult[A]
impl[A : Eq] Eq for FolderResult[A]
impl[A : Show] Show for FolderResult[A]
impl[A : ToJson] ToJson for FolderResult[A]

pub(all) struct Footnote {
  indent : Int
  label : Label
  defined_label : Label?
  block : Block
}
impl Footnote {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  map_block(Self, (Block) -> Block) -> Self
  new(indent~ : Int = .., defined_label? : Label?, Label, Block) -> Self
  normalize_block(Self) -> Self
  to_json(Self) -> Json
}
impl Show for Footnote
impl ToJson for Footnote
impl @moonbitlang/core/json.FromJson for Footnote

type Heading
impl Heading {
  to_json(Self) -> Json
}
impl Show for Heading
impl ToJson for Heading

pub(all) type HtmlBlock @moonbitlang/core/immut/list.T[Node[String]]
impl HtmlBlock {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  to_json(Self) -> Json
}
impl Show for HtmlBlock
impl ToJson for HtmlBlock
impl @moonbitlang/core/json.FromJson for HtmlBlock

type HtmlBlockStruct
impl HtmlBlockStruct {
  to_json(Self) -> Json
}
impl Show for HtmlBlockStruct
impl ToJson for HtmlBlockStruct

type IndentedCodeLine
impl IndentedCodeLine {
  to_json(Self) -> Json
}
impl Show for IndentedCodeLine
impl ToJson for IndentedCodeLine

pub(all) enum Inline {
  Autolink(Node[InlineAutolink])
  Break(Node[InlineBreak])
  CodeSpan(Node[InlineCodeSpan])
  Emphasis(Node[InlineEmphasis])
  Image(Node[InlineLink])
  Inlines(Node[@moonbitlang/core/immut/list.T[Inline]])
  Link(Node[InlineLink])
  RawHtml(Node[InlineRawHtml])
  StrongEmphasis(Node[InlineEmphasis])
  Text(Node[String])
  ExtStrikethrough(Node[InlineStrikethrough])
}
impl Inline {
  empty() -> Self
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  id(Self, buf~ : @moonbitlang/core/buffer.T = ..) -> String
  is_empty(Self) -> Bool
  meta(Self) -> @rami3l/cmark/cmark_base.Meta
  normalize(Self) -> Self
  op_equal(Self, Self) -> Bool
  to_json(Self) -> Json
  to_plain_text(Self, break_on_soft~ : Bool) -> @moonbitlang/core/immut/list.T[@moonbitlang/core/immut/list.T[String]]
}
impl Eq for Inline
impl Show for Inline
impl ToJson for Inline
impl @moonbitlang/core/json.FromJson for Inline

pub(all) struct InlineAutolink {
  is_email : Bool
  link : Node[String]
}
impl InlineAutolink {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  new(Node[String]) -> Self
  op_equal(Self, Self) -> Bool
  to_json(Self) -> Json
}
impl Eq for InlineAutolink
impl Show for InlineAutolink
impl ToJson for InlineAutolink
impl @moonbitlang/core/json.FromJson for InlineAutolink

pub(all) struct InlineBreak {
  layout_before : Node[String]
  ty : InlineBreakType
  layout_after : Node[String]
}
impl InlineBreak {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  new(layout_before~ : Node[String] = .., layout_after~ : Node[String] = .., InlineBreakType) -> Self
  op_equal(Self, Self) -> Bool
  to_json(Self) -> Json
}
impl Eq for InlineBreak
impl Show for InlineBreak
impl ToJson for InlineBreak
impl @moonbitlang/core/json.FromJson for InlineBreak

pub(all) enum InlineBreakType {
  Hard
  Soft
}
impl InlineBreakType {
  compare(Self, Self) -> Int
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  op_equal(Self, Self) -> Bool
  to_json(Self) -> Json
}
impl Compare for InlineBreakType
impl Eq for InlineBreakType
impl Show for InlineBreakType
impl ToJson for InlineBreakType
impl @moonbitlang/core/json.FromJson for InlineBreakType

pub(all) struct InlineCodeSpan {
  backticks : Int
  code_layout : @moonbitlang/core/immut/list.T[Tight]
}
impl InlineCodeSpan {
  code(Self) -> String
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  from_string(meta~ : @rami3l/cmark/cmark_base.Meta = .., String) -> Self
  new(backticks~ : Int, @moonbitlang/core/immut/list.T[Tight]) -> Self
  op_equal(Self, Self) -> Bool
  to_json(Self) -> Json
}
impl Eq for InlineCodeSpan
impl Show for InlineCodeSpan
impl ToJson for InlineCodeSpan
impl @moonbitlang/core/json.FromJson for InlineCodeSpan

pub(all) struct InlineEmphasis {
  delim : Char
  inline : Inline
}
impl InlineEmphasis {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  new(delim~ : Char = .., Inline) -> Self
  op_equal(Self, Self) -> Bool
  to_json(Self) -> Json
}
impl Eq for InlineEmphasis
impl Show for InlineEmphasis
impl ToJson for InlineEmphasis
impl @moonbitlang/core/json.FromJson for InlineEmphasis

pub(all) struct InlineLink {
  text : Inline
  reference : ReferenceKind
}
impl InlineLink {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  is_unsafe(String) -> Bool
  new(Inline, ReferenceKind) -> Self
  op_equal(Self, Self) -> Bool
  reference_definition(Self, @moonbitlang/core/immut/sorted_map.T[String, LabelDef]) -> LabelDef?
  referenced_label(Self) -> Label?
  to_json(Self) -> Json
}
impl Eq for InlineLink
impl Show for InlineLink
impl ToJson for InlineLink
impl @moonbitlang/core/json.FromJson for InlineLink

pub(all) type InlineRawHtml @moonbitlang/core/immut/list.T[Tight]
impl InlineRawHtml {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  op_equal(Self, Self) -> Bool
  to_json(Self) -> Json
}
impl Eq for InlineRawHtml
impl Show for InlineRawHtml
impl ToJson for InlineRawHtml
impl @moonbitlang/core/json.FromJson for InlineRawHtml

pub(all) type InlineStrikethrough Inline
impl InlineStrikethrough {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  op_equal(Self, Self) -> Bool
  to_json(Self) -> Json
}
impl Eq for InlineStrikethrough
impl Show for InlineStrikethrough
impl ToJson for InlineStrikethrough
impl @moonbitlang/core/json.FromJson for InlineStrikethrough

pub(all) struct Label {
  meta : @rami3l/cmark/cmark_base.Meta
  key : String
  text : @moonbitlang/core/immut/list.T[Tight]
}
impl Label {
  compare(Self, Self) -> Int
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  new(meta~ : @rami3l/cmark/cmark_base.Meta = .., key~ : String, @moonbitlang/core/immut/list.T[Tight]) -> Self
  op_equal(Self, Self) -> Bool
  text_loc(Self) -> @rami3l/cmark/cmark_base.TextLoc
  to_json(Self) -> Json
}
impl Show for Label
impl ToJson for Label
impl @moonbitlang/core/json.FromJson for Label

pub(all) enum LabelContext {
  Def(Label?, Label)
  Ref(LinkKind, Label, Label?)
}
impl LabelContext {
  default_resolver(Self) -> Label?
}

pub(all) enum LabelDef {
  LinkDef(Node[LinkDefinition])
  FootnoteDef(Node[Footnote])
}
impl LabelDef {
  to_json(Self) -> Json
}
impl Show for LabelDef
impl ToJson for LabelDef

pub(all) struct LinkDefinition {
  layout : LinkDefinitionLayout
  label : Label?
  defined_label : Label?
  dest : Node[String]?
  title : @moonbitlang/core/immut/list.T[Tight]?
}
impl LinkDefinition {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  new(layout~ : LinkDefinitionLayout = .., label~ : Label? = .., defined_label~ : Label? = .., dest~ : Node[String]? = .., title~ : @moonbitlang/core/immut/list.T[Tight]? = ..) -> Self
  op_equal(Self, Self) -> Bool
  to_json(Self) -> Json
}
impl Eq for LinkDefinition
impl Show for LinkDefinition
impl ToJson for LinkDefinition
impl @moonbitlang/core/json.FromJson for LinkDefinition

pub(all) struct LinkDefinitionLayout {
  indent : Int
  angled_dest : Bool
  before_dest : @moonbitlang/core/immut/list.T[Node[String]]
  after_dest : @moonbitlang/core/immut/list.T[Node[String]]
  title_open_delim : Char
  after_title : @moonbitlang/core/immut/list.T[Node[String]]
}
impl LinkDefinitionLayout {
  default() -> Self
  for_dest(String) -> Self
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  op_equal(Self, Self) -> Bool
  to_json(Self) -> Json
}
impl Eq for LinkDefinitionLayout
impl Show for LinkDefinitionLayout
impl ToJson for LinkDefinitionLayout
impl @moonbitlang/core/json.FromJson for LinkDefinitionLayout

pub(all) enum LinkKind {
  Link
  Image
}

type ListBlockStruct
impl ListBlockStruct {
  to_json(Self) -> Json
}
impl Show for ListBlockStruct
impl ToJson for ListBlockStruct

pub(all) struct ListItem {
  before_marker : Int
  marker : Node[String]
  after_marker : Int
  block : Block
  ext_task_marker : Node[Char]?
}
impl ListItem {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  map_block(Self, (Block) -> Block) -> Self
  new(before_marker~ : Int = .., marker~ : Node[String] = .., after_marker~ : Int = .., ext_task_marker~ : Node[Char]?, Block) -> Self
  normalize_block(Self) -> Self
  to_json(Self) -> Json
}
impl Show for ListItem
impl ToJson for ListItem
impl @moonbitlang/core/json.FromJson for ListItem

type ListItemStruct
impl ListItemStruct {
  to_json(Self) -> Json
}
impl Show for ListItemStruct
impl ToJson for ListItemStruct

pub(all) enum ListTaskStatus {
  Cancelled
  Checked
  Unchecked
  Other(Char)
}
impl ListTaskStatus {
  from_marker(Char) -> Self
}

pub(all) struct Mapper {
  inline_ext_default : (Mapper, Inline) -> Inline?!MapperError
  block_ext_default : (Mapper, Block) -> Block?!MapperError
  inline : (Mapper, Inline) -> MapperResult[Inline]
  block : (Mapper, Block) -> MapperResult[Block]
}
impl Mapper {
  block_ext_none[A](Self, A) -> A?!MapperError
  delete[A]() -> MapperResult[A]
  inline_ext_none[A](Self, A) -> A?!MapperError
  map_block(Self, Block) -> Block?
  map_doc(Self, Doc) -> Doc
  map_inline(Self, Inline) -> Inline?
  new(inline_ext_default~ : (Self, Inline) -> Inline?!MapperError = .., block_ext_default~ : (Self, Block) -> Block?!MapperError = .., inline~ : (Self, Inline) -> MapperResult[Inline] = .., block~ : (Self, Block) -> MapperResult[Block] = ..) -> Self
  none[A](Self, A) -> MapperResult[A]
  ret[A](A) -> MapperResult[A]
}

pub(all) type! MapperError String
impl Show for MapperError

pub(all) enum MapperResult {
  Default
  Map(A?)
}
impl MapperResult {
  op_equal[A : Eq](Self[A], Self[A]) -> Bool
  to_json[A : ToJson](Self[A]) -> Json
}
impl[A] Default for MapperResult[A]
impl[A : Eq] Eq for MapperResult[A]
impl[A : Show] Show for MapperResult[A]
impl[A : ToJson] ToJson for MapperResult[A]

pub(all) struct Node {
  v : A
  meta : @rami3l/cmark/cmark_base.Meta
}
impl Node {
  empty(meta~ : @rami3l/cmark/cmark_base.Meta = ..) -> Self[String]
  map[A, B](Self[A], (A) -> B) -> Self[B]
  new[A](A, meta~ : @rami3l/cmark/cmark_base.Meta = ..) -> Self[A]
  op_equal[A : Eq](Self[A], Self[A]) -> Bool
}
impl[A : Eq] Eq for Node[A]
impl[A : Show] Show for Node[A]
impl[A : ToJson] ToJson for Node[A]
impl[A : @moonbitlang/core/json.FromJson] @moonbitlang/core/json.FromJson for Node[A]

type Paragraph
impl Paragraph {
  to_json(Self) -> Json
}
impl Show for Paragraph
impl ToJson for Paragraph

type Parser
impl Show for Parser

pub(all) enum ReferenceKind {
  Inline(Node[LinkDefinition])
  Ref(ReferenceLayout, Label, Label)
}
impl ReferenceKind {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  op_equal(Self, Self) -> Bool
  to_json(Self) -> Json
}
impl Eq for ReferenceKind
impl Show for ReferenceKind
impl ToJson for ReferenceKind
impl @moonbitlang/core/json.FromJson for ReferenceKind

pub(all) enum ReferenceLayout {
  Collapsed
  Full
  Shortcut
}
impl ReferenceLayout {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  op_equal(Self, Self) -> Bool
  to_json(Self) -> Json
}
impl Eq for ReferenceLayout
impl Show for ReferenceLayout
impl ToJson for ReferenceLayout
impl @moonbitlang/core/json.FromJson for ReferenceLayout

type Setext
impl Setext {
  to_json(Self) -> Json
}
impl Show for Setext
impl ToJson for Setext

type StartColResult
impl StartColResult {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  to_json(Self) -> Json
}
impl Show for StartColResult
impl ToJson for StartColResult
impl @moonbitlang/core/json.FromJson for StartColResult

pub(all) struct Table {
  indent : Int
  col_count : Int
  rows : @moonbitlang/core/immut/list.T[(Node[TableRow], String)]
}
impl Table {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  new(indent~ : Int = .., @moonbitlang/core/immut/list.T[(Node[TableRow], String)]) -> Self
  parse_sep_row(@moonbitlang/core/immut/list.T[(Inline, (String, String))]) -> @moonbitlang/core/immut/list.T[Node[(TableAlign?, Int)]]?
  to_json(Self) -> Json
}
impl Show for Table
impl ToJson for Table
impl @moonbitlang/core/json.FromJson for Table

pub(all) enum TableAlign {
  Left
  Center
  Right
}
impl TableAlign {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  to_json(Self) -> Json
}
impl Show for TableAlign
impl ToJson for TableAlign
impl @moonbitlang/core/json.FromJson for TableAlign

pub(all) enum TableRow {
  Header(@moonbitlang/core/immut/list.T[(Inline, (String, String))])
  Sep(@moonbitlang/core/immut/list.T[Node[(TableAlign?, Int)]])
  Data(@moonbitlang/core/immut/list.T[(Inline, (String, String))])
}
impl TableRow {
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  to_json(Self) -> Json
}
impl Show for TableRow
impl ToJson for TableRow
impl @moonbitlang/core/json.FromJson for TableRow

pub(all) struct Tight {
  blanks : String
  node : Node[String]
}
impl Tight {
  empty(meta~ : @rami3l/cmark/cmark_base.Meta = ..) -> Self
  from_json(Json, @moonbitlang/core/json.JsonPath) -> Self!@moonbitlang/core/json.JsonDecodeError
  list_text_loc(@moonbitlang/core/immut/list.T[Self]) -> @rami3l/cmark/cmark_base.TextLoc
  op_equal(Self, Self) -> Bool
  to_json(Self) -> Json
  to_string(Self) -> String
}
impl Eq for Tight
impl Show for Tight
impl ToJson for Tight
impl @moonbitlang/core/json.FromJson for Tight

type Token
impl Token {
  to_json(Self) -> Json
}
impl Show for Token
impl ToJson for Token

type TokenBackticks
impl TokenBackticks {
  to_json(Self) -> Json
}
impl Show for TokenBackticks
impl ToJson for TokenBackticks

type TokenEmphasisMarks
impl TokenEmphasisMarks {
  to_json(Self) -> Json
}
impl Show for TokenEmphasisMarks
impl ToJson for TokenEmphasisMarks

type TokenInline
impl TokenInline {
  to_json(Self) -> Json
}
impl Show for TokenInline
impl ToJson for TokenInline

type TokenLinkStart
impl TokenLinkStart {
  to_json(Self) -> Json
}
impl Show for TokenLinkStart
impl ToJson for TokenLinkStart

type TokenMathSpanMarks
impl TokenMathSpanMarks {
  to_json(Self) -> Json
}
impl Show for TokenMathSpanMarks
impl ToJson for TokenMathSpanMarks

type TokenNewline
impl TokenNewline {
  to_json(Self) -> Json
}
impl Show for TokenNewline
impl ToJson for TokenNewline

type TokenStart
impl TokenStart {
  to_json(Self) -> Json
}
impl Show for TokenStart
impl ToJson for TokenStart

type TokenStrikethroughMarks
impl TokenStrikethroughMarks {
  to_json(Self) -> Json
}
impl Show for TokenStrikethroughMarks
impl ToJson for TokenStrikethroughMarks

// Type aliases
pub typealias Blanks = String

pub typealias BlanksNode = Node[String]

pub typealias BlockBlankLine = String

pub typealias BlockLineBlank = Node[String]

pub typealias Count = Int

pub typealias FilterMap[A] = A?

pub typealias FoldFn[A, B] = (Folder[B], B, A) -> B!FolderError

pub typealias FolderFn[A, B] = (Folder[B], B, A) -> FolderResult[B]

pub typealias InlineText = String

pub typealias LabelDefs = @moonbitlang/core/immut/sorted_map.T[String, LabelDef]

pub typealias LabelKey = String

pub typealias LabelMap[V] = @moonbitlang/core/immut/sorted_map.T[String, V]

pub typealias LabelResolverFn = (LabelContext) -> Label?

pub typealias ListItemBlock = ListItem

pub typealias MapFn[A] = (Mapper, A) -> A?!MapperError

pub typealias MapperFn[A] = (Mapper, A) -> MapperResult[A]

pub typealias StringNode = Node[String]

pub typealias TableCellLayout = (String, String)

pub typealias TableSep = (TableAlign?, Int)

// Traits

