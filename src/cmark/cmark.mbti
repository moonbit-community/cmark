package rami3l/cmark/cmark

// Values
let layout_empty : Node[String]

fn layout_of_string(meta~ : @rami3l/cmark/cmark_base.Meta = .., String) -> Node[String]

// Types and methods
type Atx
impl Show for Atx
impl ToJson for Atx

type BState
impl Eq for BState

pub(all) enum Block {
  BlankLine(Node[String])
  BlockQuote(Node[BlockQuote])
  Blocks(Node[Array[Block]])
  CodeBlock(Node[CodeBlock])
  Heading(Node[BlockHeading])
  HtmlBlock(Node[HtmlBlock])
  LinkRefDefinition(Node[LinkDefinition])
  List(Node[BlockList])
  Paragraph(Node[BlockParagraph])
  ThematicBreak(Node[BlockThematicBreak])
  ExtMathBlock(Node[CodeBlock])
  ExtTable(Node[Table])
  ExtFootnoteDefinition(Node[Footnote])
}
impl Block {
  defs(Self, init~ : @moonbitlang/core/immut/sorted_map.T[String, LabelDef] = ..) -> @moonbitlang/core/immut/sorted_map.T[String, LabelDef]
  empty() -> Self
  meta(Self) -> @rami3l/cmark/cmark_base.Meta
  normalize(Self) -> Self
}
impl Show for Block
impl ToJson for Block

pub(all) struct BlockHeading {
  layout : BlockHeadingLayout
  level : Int
  inline : Inline
  id : BlockHeadingId?
}
impl BlockHeading {
  new(id~ : BlockHeadingId? = .., layout~ : BlockHeadingLayout = .., level~ : Int, Inline) -> Self
}
impl Show for BlockHeading
impl ToJson for BlockHeading

pub(all) struct BlockHeadingAtxLayout {
  indent : Int
  after_opening : String
  closing : String
}
impl BlockHeadingAtxLayout {
  default() -> Self
}
impl Show for BlockHeadingAtxLayout
impl ToJson for BlockHeadingAtxLayout
impl @moonbitlang/core/json.FromJson for BlockHeadingAtxLayout

pub(all) enum BlockHeadingId {
  Auto(String)
  Id(String)
}
impl Show for BlockHeadingId
impl ToJson for BlockHeadingId
impl @moonbitlang/core/json.FromJson for BlockHeadingId

pub(all) enum BlockHeadingLayout {
  Atx(BlockHeadingAtxLayout)
  Setext(BlockHeadingSetextLayout)
}
impl Show for BlockHeadingLayout
impl ToJson for BlockHeadingLayout

pub(all) struct BlockHeadingSetextLayout {
  leading_indent : Int
  trailing_blanks : String
  underline_indent : Int
  underline_count : Node[Int]
  underline_blanks : String
}
impl Show for BlockHeadingSetextLayout
impl ToJson for BlockHeadingSetextLayout

pub(all) type BlockLine Node[String]
impl BlockLine {
  list_text_loc(@moonbitlang/core/immut/list.T[Self]) -> @rami3l/cmark/cmark_base.TextLoc
  to_string(Self) -> String
}

pub(all) struct BlockList {
  ty : @rami3l/cmark/cmark_base.ListType
  tight : Bool
  items : @moonbitlang/core/immut/list.T[Node[ListItem]]
}
impl BlockList {
  map_items(Self, (ListItem) -> ListItem) -> Self
  normalize_items(Self) -> Self
}
impl Show for BlockList
impl ToJson for BlockList

pub(all) struct BlockParagraph {
  leading_indent : Int
  inline : Inline
  trailing_blanks : String
}
impl BlockParagraph {
  new(leading_indent~ : Int = .., trailing_blanks~ : String = .., Inline) -> Self
}
impl Show for BlockParagraph
impl ToJson for BlockParagraph

pub(all) struct BlockQuote {
  indent : Int
  block : Block
}
impl BlockQuote {
  map_block(Self, (Block) -> Block) -> Self
  new(indent~ : Int = .., Block) -> Self
  normalize_block(Self) -> Self
}
impl Show for BlockQuote
impl ToJson for BlockQuote

type BlockStruct
impl Show for BlockStruct
impl ToJson for BlockStruct

pub(all) struct BlockThematicBreak {
  indent : Int
  layout : String
}
impl BlockThematicBreak {
  new(indent~ : Int = .., layout~ : String = ..) -> Self
}
impl Show for BlockThematicBreak
impl ToJson for BlockThematicBreak
impl @moonbitlang/core/json.FromJson for BlockThematicBreak

type Closer
impl Compare for Closer
impl Eq for Closer
impl Hash for Closer
impl Show for Closer
impl ToJson for Closer

type CloserIndex
impl Show for CloserIndex
impl ToJson for CloserIndex

pub(all) struct CodeBlock {
  layout : CodeBlockLayout
  info_string : Node[String]?
  code : Array[Node[String]]
}
impl CodeBlock {
  language_of_info_string(String) -> (String, String)?
  make_fence(Self) -> (Char, Int)
  new(layout~ : CodeBlockLayout = .., info_string~ : Node[String]? = .., @moonbitlang/core/immut/list.T[Node[String]]) -> Self
}
impl Show for CodeBlock
impl ToJson for CodeBlock

pub(all) struct CodeBlockFencedLayout {
  indent : Int
  opening_fence : Node[String]
  closing_fence : Node[String]?
}
impl CodeBlockFencedLayout {
  default() -> Self
}
impl Show for CodeBlockFencedLayout
impl ToJson for CodeBlockFencedLayout

pub(all) enum CodeBlockLayout {
  Indented
  Fenced(CodeBlockFencedLayout)
}
impl Show for CodeBlockLayout
impl ToJson for CodeBlockLayout

type CodeBlockStruct
impl Show for CodeBlockStruct
impl ToJson for CodeBlockStruct

pub(all) struct Doc {
  nl : String
  block : Block
  defs : @moonbitlang/core/immut/sorted_map.T[String, LabelDef]
}
impl Doc {
  empty() -> Self
  from_string(defs~ : @moonbitlang/core/immut/sorted_map.T[String, LabelDef] = .., resolver~ : (LabelContext) -> Label? = .., nested_links~ : Bool = .., heading_auto_ids~ : Bool = .., layout~ : Bool = .., locs~ : Bool = .., file~ : String = .., strict~ : Bool = .., String) -> Self
  new(nl~ : String = .., defs~ : @moonbitlang/core/immut/sorted_map.T[String, LabelDef] = .., Block) -> Self
}
impl Show for Doc
impl ToJson for Doc

type Fence
impl Show for Fence
impl ToJson for Fence

type FenceCodeBlockStruct
impl Show for FenceCodeBlockStruct
impl ToJson for FenceCodeBlockStruct

pub(all) struct Folder {
  inline_ext_default : (Folder[A], A, Inline) -> A!FolderError
  block_ext_default : (Folder[A], A, Block) -> A!FolderError
  inline : (Folder[A], A, Inline) -> FolderResult[A]
  block : (Folder[A], A, Block) -> FolderResult[A]
}
impl Folder {
  block_ext_none[A](Self[A], A, Block) -> A!FolderError
  fold_block[A](Self[A], A, Block) -> A!FolderError
  fold_doc[A](Self[A], A, Doc) -> A!FolderError
  fold_inline[A](Self[A], A, Inline) -> A!FolderError
  inline_ext_none[A](Self[A], A, Inline) -> A!FolderError
  new[A](inline_ext_default~ : (Self[A], A, Inline) -> A!FolderError = .., block_ext_default~ : (Self[A], A, Block) -> A!FolderError = .., inline~ : (Self[A], A, Inline) -> FolderResult[A] = .., block~ : (Self[A], A, Block) -> FolderResult[A] = ..) -> Self[A]
  none[A, B](Self[A], A, B) -> FolderResult[A]
  ret[A](A) -> FolderResult[A]
}

pub(all) type! FolderError String
impl Show for FolderError

pub(all) enum FolderResult {
  Default
  Fold(A)
}
impl[A] Default for FolderResult[A]
impl[A : Eq] Eq for FolderResult[A]
impl[A : Show] Show for FolderResult[A]
impl[A : ToJson] ToJson for FolderResult[A]

pub(all) struct Footnote {
  indent : Int
  label : Label
  defined_label : Label?
  block : Block
}
impl Footnote {
  map_block(Self, (Block) -> Block) -> Self
  new(indent~ : Int = .., defined_label? : Label?, Label, Block) -> Self
  normalize_block(Self) -> Self
}
impl Show for Footnote
impl ToJson for Footnote

type Heading
impl Show for Heading
impl ToJson for Heading

pub(all) type HtmlBlock Array[Node[String]]
impl Show for HtmlBlock
impl ToJson for HtmlBlock

type HtmlBlockStruct
impl Show for HtmlBlockStruct
impl ToJson for HtmlBlockStruct

type IndentedCodeLine
impl Show for IndentedCodeLine
impl ToJson for IndentedCodeLine

pub(all) enum Inline {
  Autolink(Node[InlineAutolink])
  Break(Node[InlineBreak])
  CodeSpan(Node[InlineCodeSpan])
  Emphasis(Node[InlineEmphasis])
  Image(Node[InlineLink])
  Inlines(Node[Array[Inline]])
  Link(Node[InlineLink])
  RawHtml(Node[InlineRawHtml])
  StrongEmphasis(Node[InlineEmphasis])
  Text(Node[String])
  ExtStrikethrough(Node[InlineStrikethrough])
  ExtMathSpan(Node[InlineMathSpan])
}
impl Inline {
  empty() -> Self
  id(Self, buf~ : StringBuilder = ..) -> String
  is_empty(Self) -> Bool
  meta(Self) -> @rami3l/cmark/cmark_base.Meta
  normalize(Self) -> Self
  to_plain_text(Self, break_on_soft~ : Bool) -> Array[Array[String]]
}
impl Eq for Inline
impl Show for Inline
impl ToJson for Inline

pub(all) struct InlineAutolink {
  is_email : Bool
  link : Node[String]
}
impl InlineAutolink {
  new(Node[String]) -> Self
}
impl Eq for InlineAutolink
impl Show for InlineAutolink
impl ToJson for InlineAutolink

pub(all) struct InlineBreak {
  layout_before : Node[String]
  ty : InlineBreakType
  layout_after : Node[String]
}
impl InlineBreak {
  new(layout_before~ : Node[String] = .., layout_after~ : Node[String] = .., InlineBreakType) -> Self
}
impl Eq for InlineBreak
impl Show for InlineBreak
impl ToJson for InlineBreak

pub(all) enum InlineBreakType {
  Hard
  Soft
}
impl Compare for InlineBreakType
impl Eq for InlineBreakType
impl Show for InlineBreakType
impl ToJson for InlineBreakType
impl @moonbitlang/core/json.FromJson for InlineBreakType

pub(all) struct InlineCodeSpan {
  backticks : Int
  code_layout : Array[Tight]
}
impl InlineCodeSpan {
  code(Self) -> String
  from_string(meta~ : @rami3l/cmark/cmark_base.Meta = .., String) -> Self
  new(backticks~ : Int, Array[Tight]) -> Self
}
impl Eq for InlineCodeSpan
impl Show for InlineCodeSpan
impl ToJson for InlineCodeSpan

pub(all) struct InlineEmphasis {
  delim : Char
  inline : Inline
}
impl InlineEmphasis {
  new(delim~ : Char = .., Inline) -> Self
}
impl Eq for InlineEmphasis
impl Show for InlineEmphasis
impl ToJson for InlineEmphasis

pub(all) struct InlineLink {
  text : Inline
  reference : ReferenceKind
}
impl InlineLink {
  is_unsafe(String) -> Bool
  new(Inline, ReferenceKind) -> Self
  reference_definition(Self, @moonbitlang/core/immut/sorted_map.T[String, LabelDef]) -> LabelDef?
  referenced_label(Self) -> Label?
}
impl Eq for InlineLink
impl Show for InlineLink
impl ToJson for InlineLink

pub(all) struct InlineMathSpan {
  display : Bool
  tex_layout : Array[Tight]
}
impl InlineMathSpan {
  tex(Self) -> String
}
impl Eq for InlineMathSpan
impl Show for InlineMathSpan
impl ToJson for InlineMathSpan

pub(all) type InlineRawHtml Array[Tight]
impl Eq for InlineRawHtml
impl Show for InlineRawHtml
impl ToJson for InlineRawHtml

pub(all) type InlineStrikethrough Inline
impl Eq for InlineStrikethrough
impl Show for InlineStrikethrough
impl ToJson for InlineStrikethrough

pub(all) struct Label {
  meta : @rami3l/cmark/cmark_base.Meta
  key : String
  text : Array[Tight]
}
impl Label {
  compare(Self, Self) -> Int
  new(meta~ : @rami3l/cmark/cmark_base.Meta = .., key~ : String, Array[Tight]) -> Self
  op_equal(Self, Self) -> Bool
  text_loc(Self) -> @rami3l/cmark/cmark_base.TextLoc
}
impl Show for Label
impl ToJson for Label

pub(all) enum LabelContext {
  Def(Label?, Label)
  Ref(LinkKind, Label, Label?)
}
impl LabelContext {
  default_resolver(Self) -> Label?
}

pub(all) enum LabelDef {
  LinkDef(Node[LinkDefinition])
  FootnoteDef(Node[Footnote])
}
impl Show for LabelDef
impl ToJson for LabelDef

pub(all) struct LinkDefinition {
  layout : LinkDefinitionLayout
  label : Label?
  defined_label : Label?
  dest : Node[String]?
  title : Array[Tight]?
}
impl LinkDefinition {
  new(layout~ : LinkDefinitionLayout = .., label~ : Label? = .., defined_label~ : Label? = .., dest~ : Node[String]? = .., title~ : Array[Tight]? = ..) -> Self
}
impl Eq for LinkDefinition
impl Show for LinkDefinition
impl ToJson for LinkDefinition

pub(all) struct LinkDefinitionLayout {
  indent : Int
  angled_dest : Bool
  before_dest : Array[Node[String]]
  after_dest : Array[Node[String]]
  title_open_delim : Char
  after_title : Array[Node[String]]
}
impl LinkDefinitionLayout {
  default() -> Self
  for_dest(String) -> Self
}
impl Eq for LinkDefinitionLayout
impl Show for LinkDefinitionLayout
impl ToJson for LinkDefinitionLayout

pub(all) enum LinkKind {
  Link
  Image
}

type ListBlockStruct
impl Show for ListBlockStruct
impl ToJson for ListBlockStruct

pub(all) struct ListItem {
  before_marker : Int
  marker : Node[String]
  after_marker : Int
  block : Block
  ext_task_marker : Node[Char]?
}
impl ListItem {
  map_block(Self, (Block) -> Block) -> Self
  new(before_marker~ : Int = .., marker~ : Node[String] = .., after_marker~ : Int = .., ext_task_marker~ : Node[Char]?, Block) -> Self
  normalize_block(Self) -> Self
}
impl Show for ListItem
impl ToJson for ListItem

type ListItemStruct
impl Show for ListItemStruct
impl ToJson for ListItemStruct

pub(all) enum ListTaskStatus {
  Cancelled
  Checked
  Unchecked
  Other(Char)
}
impl ListTaskStatus {
  from_marker(Char) -> Self
}

pub(all) struct Mapper {
  inline_ext_default : (Mapper, Inline) -> Inline?!MapperError
  block_ext_default : (Mapper, Block) -> Block?!MapperError
  inline : (Mapper, Inline) -> MapperResult[Inline]
  block : (Mapper, Block) -> MapperResult[Block]
}
impl Mapper {
  block_ext_none[A](Self, A) -> A?!MapperError
  delete[A]() -> MapperResult[A]
  inline_ext_none[A](Self, A) -> A?!MapperError
  map_block(Self, Block) -> Block?
  map_doc(Self, Doc) -> Doc
  map_inline(Self, Inline) -> Inline?
  new(inline_ext_default~ : (Self, Inline) -> Inline?!MapperError = .., block_ext_default~ : (Self, Block) -> Block?!MapperError = .., inline~ : (Self, Inline) -> MapperResult[Inline] = .., block~ : (Self, Block) -> MapperResult[Block] = ..) -> Self
  none[A](Self, A) -> MapperResult[A]
  ret[A](A) -> MapperResult[A]
}

pub(all) type! MapperError String
impl Show for MapperError

pub(all) enum MapperResult {
  Default
  Map(A?)
}
impl[A] Default for MapperResult[A]
impl[A : Eq] Eq for MapperResult[A]
impl[A : Show] Show for MapperResult[A]
impl[A : ToJson] ToJson for MapperResult[A]

pub(all) struct Node {
  v : A
  meta : @rami3l/cmark/cmark_base.Meta
}
impl Node {
  empty(meta~ : @rami3l/cmark/cmark_base.Meta = ..) -> Self[String]
  map[A, B](Self[A], (A) -> B) -> Self[B]
  new[A](A, meta~ : @rami3l/cmark/cmark_base.Meta = ..) -> Self[A]
}
impl[A : Eq] Eq for Node[A]
impl[A : Show] Show for Node[A]
impl[A : ToJson] ToJson for Node[A]

type Paragraph
impl Show for Paragraph
impl ToJson for Paragraph

type Parser

pub(all) enum ReferenceKind {
  Inline(Node[LinkDefinition])
  Ref(ReferenceLayout, Label, Label)
}
impl Eq for ReferenceKind
impl Show for ReferenceKind
impl ToJson for ReferenceKind

pub(all) enum ReferenceLayout {
  Collapsed
  Full
  Shortcut
}
impl Eq for ReferenceLayout
impl Show for ReferenceLayout
impl ToJson for ReferenceLayout
impl @moonbitlang/core/json.FromJson for ReferenceLayout

type Setext
impl Show for Setext
impl ToJson for Setext

type StartColResult
impl Show for StartColResult
impl ToJson for StartColResult

pub(all) struct Table {
  indent : Int
  col_count : Int
  rows : @moonbitlang/core/immut/list.T[(Node[TableRow], String)]
}
impl Table {
  new(indent~ : Int = .., @moonbitlang/core/immut/list.T[(Node[TableRow], String)]) -> Self
  parse_sep_row(@moonbitlang/core/immut/list.T[(Inline, (String, String))]) -> @moonbitlang/core/immut/list.T[Node[(TableAlign?, Int)]]?
}
impl Show for Table
impl ToJson for Table

pub(all) enum TableAlign {
  Left
  Center
  Right
}
impl Show for TableAlign
impl ToJson for TableAlign
impl @moonbitlang/core/json.FromJson for TableAlign

pub(all) enum TableRow {
  Header(@moonbitlang/core/immut/list.T[(Inline, (String, String))])
  Sep(@moonbitlang/core/immut/list.T[Node[(TableAlign?, Int)]])
  Data(@moonbitlang/core/immut/list.T[(Inline, (String, String))])
}
impl Show for TableRow
impl ToJson for TableRow

pub(all) struct Tight {
  blanks : String
  node : Node[String]
}
impl Tight {
  empty(meta~ : @rami3l/cmark/cmark_base.Meta = ..) -> Self
  list_text_loc(Array[Self]) -> @rami3l/cmark/cmark_base.TextLoc
  to_string(Self) -> String
}
impl Eq for Tight
impl Show for Tight
impl ToJson for Tight

type Token
impl Show for Token
impl ToJson for Token

type TokenBackticks
impl Show for TokenBackticks
impl ToJson for TokenBackticks

type TokenEmphasisMarks
impl Show for TokenEmphasisMarks
impl ToJson for TokenEmphasisMarks

type TokenInline
impl Show for TokenInline
impl ToJson for TokenInline

type TokenLinkStart
impl Show for TokenLinkStart
impl ToJson for TokenLinkStart

type TokenMathSpanMarks
impl Show for TokenMathSpanMarks
impl ToJson for TokenMathSpanMarks

type TokenNewline
impl Show for TokenNewline
impl ToJson for TokenNewline

type TokenStart
impl Show for TokenStart
impl ToJson for TokenStart

type TokenStrikethroughMarks
impl Show for TokenStrikethroughMarks
impl ToJson for TokenStrikethroughMarks

// Type aliases
pub typealias Blanks = String

pub typealias BlanksNode = Node[String]

pub typealias BlockBlankLine = String

pub typealias BlockLineBlank = Node[String]

pub typealias Count = Int

pub typealias FilterMap[A] = A?

pub typealias FoldFn[A, B] = (Folder[B], B, A) -> B!FolderError

pub typealias FolderFn[A, B] = (Folder[B], B, A) -> FolderResult[B]

pub typealias InlineText = String

pub typealias LabelDefs = @moonbitlang/core/immut/sorted_map.T[String, LabelDef]

pub typealias LabelKey = String

pub typealias LabelMap[V] = Map[String, V]

pub typealias LabelResolverFn = (LabelContext) -> Label?

pub typealias ListItemBlock = ListItem

pub typealias MapFn[A] = (Mapper, A) -> A?!MapperError

pub typealias MapperFn[A] = (Mapper, A) -> MapperResult[A]

pub typealias RevTokens = Array[Token]

pub typealias RevTokensView = ArrayView[Token]

pub typealias StringNode = Node[String]

pub typealias TableCellLayout = (String, String)

pub typealias TableSep = (TableAlign?, Int)

// Traits

