package "rami3l/cmark/cmark"

import(
  "moonbitlang/core/json"
  "moonbitlang/core/string"
  "rami3l/cmark/cmark_base"
)

// Values
let layout_empty : Node[@string.StringView]

fn layout_of_string(meta~ : @cmark_base.Meta = .., String) -> Node[@string.StringView]

fn tex(InlineMathSpan) -> String

// Types and methods
pub(all) enum Block {
  BlankLine(Node[@string.StringView])
  BlockQuote(Node[BlockQuote])
  Blocks(Node[Seq[Block]])
  CodeBlock(Node[CodeBlock])
  Heading(Node[BlockHeading])
  HtmlBlock(Node[HtmlBlock])
  LinkRefDefinition(Node[LinkDefinition])
  List(Node[BlockList])
  Paragraph(Node[BlockParagraph])
  ThematicBreak(Node[BlockThematicBreak])
  ExtMathBlock(Node[CodeBlock])
  ExtTable(Node[Table])
  ExtFootnoteDefinition(Node[Footnote])
}
impl Block {
  defs(Self, init~ : Map[@string.StringView, LabelDef] = ..) -> Map[@string.StringView, LabelDef]
  empty() -> Self
  meta(Self) -> @cmark_base.Meta
  normalize(Self) -> Self
}
impl Show for Block
impl ToJson for Block

pub(all) struct BlockHeading {
  layout : BlockHeadingLayout
  level : Int
  inline : Inline
  id : BlockHeadingId?
}
impl BlockHeading {
  new(id~ : BlockHeadingId? = .., layout~ : BlockHeadingLayout = .., level~ : Int, Inline) -> Self
}
impl Show for BlockHeading
impl ToJson for BlockHeading

pub(all) struct BlockHeadingAtxLayout {
  indent : Int
  after_opening : @string.StringView
  closing : String
}
impl BlockHeadingAtxLayout {
  default() -> Self
}
impl Show for BlockHeadingAtxLayout
impl ToJson for BlockHeadingAtxLayout
impl @json.FromJson for BlockHeadingAtxLayout

pub(all) enum BlockHeadingId {
  Auto(String)
  Id(String)
}
impl Show for BlockHeadingId
impl ToJson for BlockHeadingId
impl @json.FromJson for BlockHeadingId

pub(all) enum BlockHeadingLayout {
  Atx(BlockHeadingAtxLayout)
  Setext(BlockHeadingSetextLayout)
}
impl Show for BlockHeadingLayout
impl ToJson for BlockHeadingLayout

pub(all) struct BlockHeadingSetextLayout {
  leading_indent : Int
  trailing_blanks : @string.StringView
  underline_indent : Int
  underline_count : Node[Int]
  underline_blanks : @string.StringView
}
impl Show for BlockHeadingSetextLayout
impl ToJson for BlockHeadingSetextLayout

pub(all) type BlockLine Node[String]
impl BlockLine {
  list_text_loc(Seq[Self]) -> @cmark_base.TextLoc
  to_string(Self) -> String
}

pub(all) struct BlockList {
  ty : @cmark_base.ListType
  tight : Bool
  items : Seq[Node[ListItem]]
}
impl BlockList {
  map_items(Self, (ListItem) -> ListItem) -> Self
  normalize_items(Self) -> Self
}
impl Show for BlockList
impl ToJson for BlockList

pub(all) struct BlockParagraph {
  leading_indent : Int
  inline : Inline
  trailing_blanks : @string.StringView
}
impl BlockParagraph {
  new(leading_indent~ : Int = .., trailing_blanks~ : @string.StringView = .., Inline) -> Self
}
impl Show for BlockParagraph
impl ToJson for BlockParagraph

pub(all) struct BlockQuote {
  indent : Int
  block : Block
}
impl BlockQuote {
  map_block(Self, (Block) -> Block) -> Self
  new(indent~ : Int = .., Block) -> Self
  normalize_block(Self) -> Self
}
impl Show for BlockQuote
impl ToJson for BlockQuote

pub(all) struct BlockThematicBreak {
  indent : Int
  layout : @string.StringView
}
impl BlockThematicBreak {
  new(indent~ : Int = .., layout~ : @string.StringView = ..) -> Self
}
impl Show for BlockThematicBreak
impl ToJson for BlockThematicBreak
impl @json.FromJson for BlockThematicBreak

pub(all) struct CodeBlock {
  layout : CodeBlockLayout
  info_string : Node[@string.StringView]?
  code : Seq[Node[@string.StringView]]
}
impl CodeBlock {
  language_of_info_string(@string.StringView) -> (@string.StringView, @string.StringView)?
  make_fence(Self) -> (Char, Int)
  new(layout~ : CodeBlockLayout = .., info_string~ : Node[@string.StringView]? = .., Seq[Node[@string.StringView]]) -> Self
}
impl Show for CodeBlock
impl ToJson for CodeBlock

pub(all) struct CodeBlockFencedLayout {
  indent : Int
  opening_fence : Node[@string.StringView]
  closing_fence : Node[@string.StringView]?
}
impl CodeBlockFencedLayout {
  default() -> Self
}
impl Show for CodeBlockFencedLayout
impl ToJson for CodeBlockFencedLayout

pub(all) enum CodeBlockLayout {
  Indented
  Fenced(CodeBlockFencedLayout)
}
impl Show for CodeBlockLayout
impl ToJson for CodeBlockLayout

pub(all) struct Doc {
  nl : String
  block : Block
  defs : Map[@string.StringView, LabelDef]
}
impl Doc {
  empty() -> Self
  from_string(defs~ : Map[@string.StringView, LabelDef] = .., resolver~ : (LabelContext) -> Label? = .., nested_links~ : Bool = .., heading_auto_ids~ : Bool = .., layout~ : Bool = .., locs~ : Bool = .., file~ : String = .., strict~ : Bool = .., String) -> Self
  new(nl~ : String = .., defs~ : Map[@string.StringView, LabelDef] = .., Block) -> Self
}
impl Show for Doc
impl ToJson for Doc

pub(all) struct Folder[A] {
  inline_ext_default : (Folder[A], A, Inline) -> A!FolderError
  block_ext_default : (Folder[A], A, Block) -> A!FolderError
  inline : (Folder[A], A, Inline) -> FolderResult[A]
  block : (Folder[A], A, Block) -> FolderResult[A]
}
impl Folder {
  block_ext_none[A](Self[A], A, Block) -> A!FolderError
  fold_block[A](Self[A], A, Block) -> A!FolderError
  fold_doc[A](Self[A], A, Doc) -> A!FolderError
  fold_inline[A](Self[A], A, Inline) -> A!FolderError
  inline_ext_none[A](Self[A], A, Inline) -> A!FolderError
  new[A](inline_ext_default~ : (Self[A], A, Inline) -> A!FolderError = .., block_ext_default~ : (Self[A], A, Block) -> A!FolderError = .., inline~ : (Self[A], A, Inline) -> FolderResult[A] = .., block~ : (Self[A], A, Block) -> FolderResult[A] = ..) -> Self[A]
  none[A, B](Self[A], A, B) -> FolderResult[A]
  ret[A](A) -> FolderResult[A]
}

pub(all) type! FolderError String
impl Show for FolderError

pub(all) enum FolderResult[A] {
  Default
  Fold(A)
}
impl[A] Default for FolderResult[A]
impl[A : Eq] Eq for FolderResult[A]
impl[A : Show] Show for FolderResult[A]
impl[A : ToJson] ToJson for FolderResult[A]

pub(all) struct Footnote {
  indent : Int
  label : Label
  defined_label : Label?
  block : Block
}
impl Footnote {
  map_block(Self, (Block) -> Block) -> Self
  new(indent~ : Int = .., defined_label? : Label?, Label, Block) -> Self
  normalize_block(Self) -> Self
}
impl Show for Footnote
impl ToJson for Footnote

pub(all) type HtmlBlock Seq[Node[@string.StringView]]
impl Show for HtmlBlock
impl ToJson for HtmlBlock

pub(all) enum Inline {
  Autolink(Node[InlineAutolink])
  Break(Node[InlineBreak])
  CodeSpan(Node[InlineCodeSpan])
  Emphasis(Node[InlineEmphasis])
  Image(Node[InlineLink])
  Inlines(Node[Seq[Inline]])
  Link(Node[InlineLink])
  RawHtml(Node[InlineRawHtml])
  StrongEmphasis(Node[InlineEmphasis])
  Text(Node[@string.StringView])
  ExtStrikethrough(Node[InlineStrikethrough])
  ExtMathSpan(Node[InlineMathSpan])
}
impl Inline {
  empty() -> Self
  id(Self, buf~ : StringBuilder = ..) -> String
  is_empty(Self) -> Bool
  meta(Self) -> @cmark_base.Meta
  normalize(Self) -> Self
  to_plain_text(Self, break_on_soft~ : Bool) -> Seq[Seq[String]]
}
impl Eq for Inline
impl Show for Inline
impl ToJson for Inline

pub(all) struct InlineAutolink {
  is_email : Bool
  link : Node[@string.StringView]
}
impl InlineAutolink {
  new(Node[@string.StringView]) -> Self
}
impl Eq for InlineAutolink
impl Show for InlineAutolink
impl ToJson for InlineAutolink

pub(all) struct InlineBreak {
  layout_before : Node[@string.StringView]
  ty : InlineBreakType
  layout_after : Node[@string.StringView]
}
impl InlineBreak {
  new(layout_before~ : Node[@string.StringView] = .., layout_after~ : Node[@string.StringView] = .., InlineBreakType) -> Self
}
impl Eq for InlineBreak
impl Show for InlineBreak
impl ToJson for InlineBreak

pub(all) enum InlineBreakType {
  Hard
  Soft
}
impl Compare for InlineBreakType
impl Eq for InlineBreakType
impl Show for InlineBreakType
impl ToJson for InlineBreakType
impl @json.FromJson for InlineBreakType

pub(all) struct InlineCodeSpan {
  backticks : Int
  code_layout : Seq[Tight]
}
impl InlineCodeSpan {
  code(Self) -> @string.StringView
  from_string(meta~ : @cmark_base.Meta = .., @string.StringView) -> Self
  new(backticks~ : Int, Seq[Tight]) -> Self
}
impl Eq for InlineCodeSpan
impl Show for InlineCodeSpan
impl ToJson for InlineCodeSpan

pub(all) struct InlineEmphasis {
  delim : Char
  inline : Inline
}
impl InlineEmphasis {
  new(delim~ : Char = .., Inline) -> Self
}
impl Eq for InlineEmphasis
impl Show for InlineEmphasis
impl ToJson for InlineEmphasis

pub(all) struct InlineLink {
  text : Inline
  reference : ReferenceKind
}
impl InlineLink {
  is_unsafe(@string.StringView) -> Bool
  new(Inline, ReferenceKind) -> Self
  reference_definition(Self, Map[@string.StringView, LabelDef]) -> LabelDef?
  referenced_label(Self) -> Label?
}
impl Eq for InlineLink
impl Show for InlineLink
impl ToJson for InlineLink

pub(all) struct InlineMathSpan {
  display : Bool
  tex_layout : Seq[Tight]
}
impl InlineMathSpan {
  tex(Self) -> String
}
impl Eq for InlineMathSpan
impl Show for InlineMathSpan
impl ToJson for InlineMathSpan

pub(all) type InlineRawHtml Seq[Tight]
impl Eq for InlineRawHtml
impl Show for InlineRawHtml
impl ToJson for InlineRawHtml

pub(all) type InlineStrikethrough Inline
impl Eq for InlineStrikethrough
impl Show for InlineStrikethrough
impl ToJson for InlineStrikethrough

pub(all) struct Label {
  meta : @cmark_base.Meta
  key : @string.StringView
  text : Seq[Tight]
}
impl Label {
  compare(Self, Self) -> Int
  new(meta~ : @cmark_base.Meta = .., key~ : String, Seq[Tight]) -> Self
  text_loc(Self) -> @cmark_base.TextLoc
}
impl Eq for Label
impl Show for Label
impl ToJson for Label

pub(all) enum LabelContext {
  Def(Label?, Label)
  Ref(LinkKind, Label, Label?)
}
impl LabelContext {
  default_resolver(Self) -> Label?
}

pub(all) enum LabelDef {
  LinkDef(Node[LinkDefinition])
  FootnoteDef(Node[Footnote])
}
impl Show for LabelDef
impl ToJson for LabelDef

pub(all) struct LinkDefinition {
  layout : LinkDefinitionLayout
  label : Label?
  defined_label : Label?
  dest : Node[@string.StringView]?
  title : Seq[Tight]?
}
impl LinkDefinition {
  new(layout~ : LinkDefinitionLayout = .., label~ : Label? = .., defined_label~ : Label? = .., dest~ : Node[@string.StringView]? = .., title~ : Seq[Tight]? = ..) -> Self
}
impl Eq for LinkDefinition
impl Show for LinkDefinition
impl ToJson for LinkDefinition

pub(all) struct LinkDefinitionLayout {
  indent : Int
  angled_dest : Bool
  before_dest : Seq[Node[@string.StringView]]
  after_dest : Seq[Node[@string.StringView]]
  title_open_delim : Char
  after_title : Seq[Node[@string.StringView]]
}
impl LinkDefinitionLayout {
  default() -> Self
  for_dest(@string.StringView) -> Self
}
impl Eq for LinkDefinitionLayout
impl Show for LinkDefinitionLayout
impl ToJson for LinkDefinitionLayout

pub(all) enum LinkKind {
  Link
  Image
}

pub(all) struct ListItem {
  before_marker : Int
  marker : Node[@string.StringView]
  after_marker : Int
  block : Block
  ext_task_marker : Node[Char]?
}
impl ListItem {
  map_block(Self, (Block) -> Block) -> Self
  new(before_marker~ : Int = .., marker~ : Node[@string.StringView] = .., after_marker~ : Int = .., ext_task_marker~ : Node[Char]?, Block) -> Self
  normalize_block(Self) -> Self
}
impl Show for ListItem
impl ToJson for ListItem

pub(all) enum ListTaskStatus {
  Cancelled
  Checked
  Unchecked
  Other(Char)
}
impl ListTaskStatus {
  from_marker(Char) -> Self
}

pub(all) struct Mapper {
  inline_ext_default : (Mapper, Inline) -> Inline?!MapperError
  block_ext_default : (Mapper, Block) -> Block?!MapperError
  inline : (Mapper, Inline) -> MapperResult[Inline]
  block : (Mapper, Block) -> MapperResult[Block]
}
impl Mapper {
  block_ext_none[A](Self, A) -> A?!MapperError
  delete[A]() -> MapperResult[A]
  inline_ext_none[A](Self, A) -> A?!MapperError
  map_block(Self, Block) -> Block?
  map_doc(Self, Doc) -> Doc
  map_inline(Self, Inline) -> Inline?
  new(inline_ext_default~ : (Self, Inline) -> Inline?!MapperError = .., block_ext_default~ : (Self, Block) -> Block?!MapperError = .., inline~ : (Self, Inline) -> MapperResult[Inline] = .., block~ : (Self, Block) -> MapperResult[Block] = ..) -> Self
  none[A](Self, A) -> MapperResult[A]
  ret[A](A) -> MapperResult[A]
}

pub(all) type! MapperError String
impl Show for MapperError

pub(all) enum MapperResult[A] {
  Default
  Map(A?)
}
impl[A] Default for MapperResult[A]
impl[A : Eq] Eq for MapperResult[A]
impl[A : Show] Show for MapperResult[A]
impl[A : ToJson] ToJson for MapperResult[A]

pub(all) struct Node[A] {
  v : A
  meta : @cmark_base.Meta
}
impl Node {
  empty(meta~ : @cmark_base.Meta = ..) -> Self[@string.StringView]
  map[A, B](Self[A], (A) -> B) -> Self[B]
  new[A](A, meta~ : @cmark_base.Meta = ..) -> Self[A]
}
impl[A : Eq] Eq for Node[A]
impl[A : Show] Show for Node[A]
impl[A : ToJson] ToJson for Node[A]

pub(all) enum ReferenceKind {
  Inline(Node[LinkDefinition])
  Ref(ReferenceLayout, Label, Label)
}
impl Eq for ReferenceKind
impl Show for ReferenceKind
impl ToJson for ReferenceKind

pub(all) enum ReferenceLayout {
  Collapsed
  Full
  Shortcut
}
impl Eq for ReferenceLayout
impl Show for ReferenceLayout
impl ToJson for ReferenceLayout
impl @json.FromJson for ReferenceLayout

type Seq[A]
impl Seq {
  empty[A]() -> Self[A]
  fold[A, B](Self[A], init~ : B, (B, A) -> B) -> B
  from_array[A](Array[A]) -> Self[A]
  from_iter[A](Iter[A]) -> Self[A]
  get[A](Self[A], Int) -> A?
  is_empty[A](Self[A]) -> Bool
  iter[A](Self[A]) -> Iter[A]
  length[A](Self[A]) -> Int
  map[A, B](Self[A], (A) -> B) -> Self[B]
  op_get[A](Self[A], Int) -> A
  op_set[A](Self[A], Int, A) -> Unit
  rev_fold[A, B](Self[A], init~ : B, (B, A) -> B) -> B
  to_array[A](Self[A]) -> Array[A]
}
impl[A : Eq] Eq for Seq[A]
impl[A : Show] Show for Seq[A]
impl[A : ToJson] ToJson for Seq[A]

pub(all) struct Table {
  indent : Int
  col_count : Int
  rows : Seq[(Node[TableRow], @string.StringView)]
}
impl Table {
  new(indent~ : Int = .., Seq[(Node[TableRow], @string.StringView)]) -> Self
}
impl Show for Table
impl ToJson for Table

pub(all) enum TableAlign {
  Left
  Center
  Right
}
impl Show for TableAlign
impl ToJson for TableAlign
impl @json.FromJson for TableAlign

pub(all) enum TableRow {
  Header(Seq[(Inline, (@string.StringView, @string.StringView))])
  Sep(Seq[Node[(TableAlign?, Int)]])
  Data(Seq[(Inline, (@string.StringView, @string.StringView))])
}
impl Show for TableRow
impl ToJson for TableRow

pub(all) struct Tight {
  blanks : @string.StringView
  node : Node[@string.StringView]
}
impl Tight {
  empty(meta~ : @cmark_base.Meta = ..) -> Self
  list_text_loc(Seq[Self]) -> @cmark_base.TextLoc
  to_string_view(Self) -> @string.StringView
}
impl Eq for Tight
impl Show for Tight
impl ToJson for Tight

// Type aliases
pub typealias Blanks = @string.StringView

pub typealias BlanksNode = Node[@string.StringView]

pub typealias BlockBlankLine = @string.StringView

pub typealias BlockLineBlank = Node[@string.StringView]

pub typealias Count = Int

pub typealias FilterMap[A] = A?

pub typealias FoldFn[A, B] = (Folder[B], B, A) -> B!FolderError

pub typealias FolderFn[A, B] = (Folder[B], B, A) -> FolderResult[B]

pub typealias InlineText = @string.StringView

pub typealias LabelDefs = Map[@string.StringView, LabelDef]

pub typealias LabelKey = @string.StringView

pub typealias LabelMap[V] = Map[@string.StringView, V]

pub typealias LabelResolverFn = (LabelContext) -> Label?

pub typealias ListItemBlock = ListItem

pub typealias MapFn[A] = (Mapper, A) -> A?!MapperError

pub typealias MapperFn[A] = (Mapper, A) -> MapperResult[A]

pub typealias StringNode = Node[@string.StringView]

pub typealias TableCellLayout = (@string.StringView, @string.StringView)

pub typealias TableSep = (TableAlign?, Int)

// Traits

