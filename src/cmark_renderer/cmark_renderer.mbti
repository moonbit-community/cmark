package rami3l/cmark/cmark_renderer

// Values

// Types and methods
pub(all) struct Context {
  renderer : Renderer
  state : Error?
  b : StringBuilder
  doc : @rami3l/cmark/cmark.Doc
}
impl Context {
  block(Self, @rami3l/cmark/cmark.Block) -> Unit!
  char(Self, Char) -> Unit
  doc(Self, @rami3l/cmark/cmark.Doc) -> Unit!
  init(Self, @rami3l/cmark/cmark.Doc) -> Unit
  inline(Self, @rami3l/cmark/cmark.Inline) -> Unit!
  new(Renderer, StringBuilder) -> Self
  string(Self, String) -> Unit
}

pub(all) type! RenderError String
impl Show for RenderError

pub(all) struct Renderer {
  init_context : (Context, @rami3l/cmark/cmark.Doc) -> Unit
  inline : (Context, @rami3l/cmark/cmark.Inline) -> Bool!
  block : (Context, @rami3l/cmark/cmark.Block) -> Bool!
  doc : (Context, @rami3l/cmark/cmark.Doc) -> Bool!
}
impl Renderer {
  buffer_add_doc(Self, StringBuilder, @rami3l/cmark/cmark.Doc) -> Unit!
  compose(Self, Self) -> Self
  doc_to_string(Self, @rami3l/cmark/cmark.Doc) -> String!
  new(init_context~ : (Context, @rami3l/cmark/cmark.Doc) -> Unit = .., inline~ : (Context, @rami3l/cmark/cmark.Inline) -> Bool! = .., block~ : (Context, @rami3l/cmark/cmark.Block) -> Bool! = .., doc~ : (Context, @rami3l/cmark/cmark.Doc) -> Bool! = ..) -> Self
}

// Type aliases
pub typealias BlockFn = (Context, @rami3l/cmark/cmark.Block) -> Bool!

pub typealias DocFn = (Context, @rami3l/cmark/cmark.Doc) -> Bool!

pub typealias InitContextFn = (Context, @rami3l/cmark/cmark.Doc) -> Unit

pub typealias InlineFn = (Context, @rami3l/cmark/cmark.Inline) -> Bool!

// Traits

